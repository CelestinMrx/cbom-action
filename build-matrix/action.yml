name: PQC Build Dependency Graph Matrix Action
description: Create a dependency matrix to pass to the PQC Analyze Action
inputs:
  repositoryNameWithOwner:
    description: The base repository to analyze
    required: false
    default: ${{ github.repository }}
  minimumLanguageBytes:
    description: The minimum number of bytes a language must have to be included in the matrix
    required: false
    default: "5000"
outputs:
  repositories:
    description: The repositories to analyze
    value: ${{ steps.run.outputs.repositories }}
runs:
  using: composite
  steps:
    - name: Set up env
      shell: bash -ex {0}
      run: |
        IFS=/ read -r REPO_OWNER REPO_NAME <<< ${{ inputs.repositoryNameWithOwner }}
        echo "REPO_OWNER=${REPO_OWNER}" >> "$GITHUB_ENV"
        echo "REPO_NAME=${REPO_NAME}" >> "$GITHUB_ENV"
        echo "GH_TOKEN=${{ github.token }}" >> "$GITHUB_ENV"
    - id: run
      shell: bash -ex {0}
      run: |
        JSON=$(gh api graphql -H 'Accept: application/vnd.github.hawkgirl-preview+json' -f query='
          query getDependencyGraphAndLanguages {
            repository(owner: "${{ env.REPO_OWNER }}", name: "${{ env.REPO_NAME }}") {
              nameWithOwner
              dependencyGraphManifests {
                totalCount
                edges {
                  node {
                    filename
                    dependencies {
                      edges {
                        node {
                          packageName
                          packageManager
                          requirements
                          repository {
                            nameWithOwner
                            languages(first: 50) {
                              totalCount
                              pageInfo {
                                hasNextPage
                                endCursor
                              }
                              edges {
                                size
                                node {
                                  name
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              languages(first: 50) {
                totalCount
                pageInfo {
                  hasNextPage
                  endCursor
                }
                edges {
                  size
                  node {
                    name
                  }
                }
              }
            }
          }
        ')
        # TODO: add option to filter language on size (e.g. only include languages with more than 10000 bytes)
        REPOSITORIES=$(jq -c '
          ([.data.repository.nameWithOwner as $nameWithOwner | 
          .data.repository.languages.edges[] | 
          select(.size >= ${{ inputs.minimumLanguageBytes }}).node.name |
          select(.|IN("Java","C","C++","Python","Go","C#")) as $language | 
          [$nameWithOwner, if $language == "C" then "C++" else $language end] | tostring] | unique) +
          ([.data.repository.dependencyGraphManifests.edges[].node | 
          select(.filename|contains(".github/workflows")|not) | 
          .dependencies.edges[].node.repository as $repository |
          select($repository != null) | 
          $repository.nameWithOwner as $nameWithOwner | 
          $repository.languages.edges[] | 
          select(.size >= ${{ inputs.minimumLanguageBytes }}).node.name |
          select(.|IN("Java","C","C++","Python","Go","C#")) as $language | 
          [$nameWithOwner, if $language == "C" then "C++" else $language end] | tostring] | unique)
        ' <<< $JSON \
        | sed 's/\\\"C\\\"/\\\"cpp\\\"/g; s/\\\"C++\\\"/\\\"cpp\\\"/g; s/\\\"C#\\\"/\\\"csharp\\\"/g' \
        | tr '[:upper:]' '[:lower:]')
        echo "repositories=$REPOSITORIES" >> "$GITHUB_OUTPUT"